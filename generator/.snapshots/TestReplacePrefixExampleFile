([]string) (len=1299) {
  (string) (len=41) "// Code generated by go-enum DO NOT EDIT.",
  (string) (len=13) "// Version: -",
  (string) (len=14) "// Revision: -",
  (string) (len=16) "// Build Date: -",
  (string) (len=14) "// Built By: -",
  (string) "",
  (string) (len=17) "package generator",
  (string) "",
  (string) (len=8) "import (",
  (string) (len=6) "\t\"fmt\"",
  (string) (len=10) "\t\"strings\"",
  (string) "",
  (string) (len=24) "\t\"github.com/pkg/errors\"",
  (string) (len=1) ")",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=41) "\t// MyPrefix_Cat is a Animal of type Cat.",
  (string) (len=27) "\tMyPrefix_Cat Animal = iota",
  (string) (len=41) "\t// MyPrefix_Dog is a Animal of type Dog.",
  (string) (len=13) "\tMyPrefix_Dog",
  (string) (len=43) "\t// MyPrefix_Fish is a Animal of type Fish.",
  (string) (len=14) "\tMyPrefix_Fish",
  (string) (len=1) ")",
  (string) "",
  (string) (len=55) "var ErrInvalidAnimal = errors.New(\"not a valid Animal\")",
  (string) "",
  (string) (len=32) "const _animalName = \"CatDogFish\"",
  (string) "",
  (string) (len=35) "var _animalMap = map[Animal]string{",
  (string) (len=33) "\tMyPrefix_Cat:  _animalName[0:3],",
  (string) (len=33) "\tMyPrefix_Dog:  _animalName[3:6],",
  (string) (len=34) "\tMyPrefix_Fish: _animalName[6:10],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=33) "func (x Animal) String() string {",
  (string) (len=34) "\tif str, ok := _animalMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=36) "\treturn fmt.Sprintf(\"Animal(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=37) "var _animalValue = map[string]Animal{",
  (string) (len=50) "\t_animalName[0:3]:                   MyPrefix_Cat,",
  (string) (len=50) "\tstrings.ToLower(_animalName[0:3]):  MyPrefix_Cat,",
  (string) (len=50) "\t_animalName[3:6]:                   MyPrefix_Dog,",
  (string) (len=50) "\tstrings.ToLower(_animalName[3:6]):  MyPrefix_Dog,",
  (string) (len=51) "\t_animalName[6:10]:                  MyPrefix_Fish,",
  (string) (len=51) "\tstrings.ToLower(_animalName[6:10]): MyPrefix_Fish,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// ParseAnimal attempts to convert a string to a Animal.",
  (string) (len=47) "func ParseAnimal(name string) (Animal, error) {",
  (string) (len=37) "\tif x, ok := _animalValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=65) "\treturn Animal(0), fmt.Errorf(\"%s is %w\", name, ErrInvalidAnimal)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// MarshalText implements the text marshaller method.",
  (string) (len=47) "func (x Animal) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// UnmarshalText implements the text unmarshaller method.",
  (string) (len=51) "func (x *Animal) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=30) "\ttmp, err := ParseAnimal(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=40) "func (x *Animal) Set(val string) error {",
  (string) (len=27) "\tv, err := ParseAnimal(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=36) "func (x *Animal) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=32) "func (x *Animal) Type() string {",
  (string) (len=16) "\treturn \"Animal\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=54) "\t// MyPrefix_Test_lower is a Cases of type Test_lower.",
  (string) (len=33) "\tMyPrefix_Test_lower Cases = iota",
  (string) (len=58) "\t// MyPrefix_Test_capital is a Cases of type Test_capital.",
  (string) (len=22) "\tMyPrefix_Test_capital",
  (string) (len=76) "\t// MyPrefix_AnotherLowerCaseStart is a Cases of type AnotherLowerCaseStart.",
  (string) (len=31) "\tMyPrefix_AnotherLowerCaseStart",
  (string) (len=1) ")",
  (string) "",
  (string) (len=53) "var ErrInvalidCases = errors.New(\"not a valid Cases\")",
  (string) "",
  (string) (len=64) "const _casesName = \"test_lowerTest_capitalanotherLowerCaseStart\"",
  (string) "",
  (string) (len=33) "var _casesMap = map[Cases]string{",
  (string) (len=50) "\tMyPrefix_Test_lower:            _casesName[0:10],",
  (string) (len=51) "\tMyPrefix_Test_capital:          _casesName[10:22],",
  (string) (len=51) "\tMyPrefix_AnotherLowerCaseStart: _casesName[22:43],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=32) "func (x Cases) String() string {",
  (string) (len=33) "\tif str, ok := _casesMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=35) "\treturn fmt.Sprintf(\"Cases(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "var _casesValue = map[string]Cases{",
  (string) (len=57) "\t_casesName[0:10]:                   MyPrefix_Test_lower,",
  (string) (len=57) "\tstrings.ToLower(_casesName[0:10]):  MyPrefix_Test_lower,",
  (string) (len=59) "\t_casesName[10:22]:                  MyPrefix_Test_capital,",
  (string) (len=59) "\tstrings.ToLower(_casesName[10:22]): MyPrefix_Test_capital,",
  (string) (len=68) "\t_casesName[22:43]:                  MyPrefix_AnotherLowerCaseStart,",
  (string) (len=68) "\tstrings.ToLower(_casesName[22:43]): MyPrefix_AnotherLowerCaseStart,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=54) "// ParseCases attempts to convert a string to a Cases.",
  (string) (len=45) "func ParseCases(name string) (Cases, error) {",
  (string) (len=36) "\tif x, ok := _casesValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=63) "\treturn Cases(0), fmt.Errorf(\"%s is %w\", name, ErrInvalidCases)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// MarshalText implements the text marshaller method.",
  (string) (len=46) "func (x Cases) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// UnmarshalText implements the text unmarshaller method.",
  (string) (len=50) "func (x *Cases) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=29) "\ttmp, err := ParseCases(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=39) "func (x *Cases) Set(val string) error {",
  (string) (len=26) "\tv, err := ParseCases(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=35) "func (x *Cases) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=31) "func (x *Cases) Type() string {",
  (string) (len=15) "\treturn \"Cases\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=44) "\t// MyPrefix_Black is a Color of type Black.",
  (string) (len=28) "\tMyPrefix_Black Color = iota",
  (string) (len=44) "\t// MyPrefix_White is a Color of type White.",
  (string) (len=15) "\tMyPrefix_White",
  (string) (len=40) "\t// MyPrefix_Red is a Color of type Red.",
  (string) (len=13) "\tMyPrefix_Red",
  (string) (len=44) "\t// MyPrefix_Green is a Color of type Green.",
  (string) (len=15) "\tMyPrefix_Green",
  (string) (len=42) "\t// MyPrefix_Blue is a Color of type Blue.",
  (string) (len=32) "\tMyPrefix_Blue Color = iota + 29",
  (string) (len=42) "\t// MyPrefix_Grey is a Color of type Grey.",
  (string) (len=14) "\tMyPrefix_Grey",
  (string) (len=46) "\t// MyPrefix_Yellow is a Color of type Yellow.",
  (string) (len=16) "\tMyPrefix_Yellow",
  (string) (len=1) ")",
  (string) "",
  (string) (len=53) "var ErrInvalidColor = errors.New(\"not a valid Color\")",
  (string) "",
  (string) (len=53) "const _colorName = \"BlackWhiteRedGreenBluegreyyellow\"",
  (string) "",
  (string) (len=33) "var _colorMap = map[Color]string{",
  (string) (len=34) "\tMyPrefix_Black:  _colorName[0:5],",
  (string) (len=35) "\tMyPrefix_White:  _colorName[5:10],",
  (string) (len=36) "\tMyPrefix_Red:    _colorName[10:13],",
  (string) (len=36) "\tMyPrefix_Green:  _colorName[13:18],",
  (string) (len=36) "\tMyPrefix_Blue:   _colorName[18:22],",
  (string) (len=36) "\tMyPrefix_Grey:   _colorName[22:26],",
  (string) (len=36) "\tMyPrefix_Yellow: _colorName[26:32],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=32) "func (x Color) String() string {",
  (string) (len=33) "\tif str, ok := _colorMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=35) "\treturn fmt.Sprintf(\"Color(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "var _colorValue = map[string]Color{",
  (string) (len=52) "\t_colorName[0:5]:                    MyPrefix_Black,",
  (string) (len=52) "\tstrings.ToLower(_colorName[0:5]):   MyPrefix_Black,",
  (string) (len=52) "\t_colorName[5:10]:                   MyPrefix_White,",
  (string) (len=52) "\tstrings.ToLower(_colorName[5:10]):  MyPrefix_White,",
  (string) (len=50) "\t_colorName[10:13]:                  MyPrefix_Red,",
  (string) (len=50) "\tstrings.ToLower(_colorName[10:13]): MyPrefix_Red,",
  (string) (len=52) "\t_colorName[13:18]:                  MyPrefix_Green,",
  (string) (len=52) "\tstrings.ToLower(_colorName[13:18]): MyPrefix_Green,",
  (string) (len=51) "\t_colorName[18:22]:                  MyPrefix_Blue,",
  (string) (len=51) "\tstrings.ToLower(_colorName[18:22]): MyPrefix_Blue,",
  (string) (len=51) "\t_colorName[22:26]:                  MyPrefix_Grey,",
  (string) (len=51) "\tstrings.ToLower(_colorName[22:26]): MyPrefix_Grey,",
  (string) (len=53) "\t_colorName[26:32]:                  MyPrefix_Yellow,",
  (string) (len=53) "\tstrings.ToLower(_colorName[26:32]): MyPrefix_Yellow,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=54) "// ParseColor attempts to convert a string to a Color.",
  (string) (len=45) "func ParseColor(name string) (Color, error) {",
  (string) (len=36) "\tif x, ok := _colorValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=63) "\treturn Color(0), fmt.Errorf(\"%s is %w\", name, ErrInvalidColor)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// MarshalText implements the text marshaller method.",
  (string) (len=46) "func (x Color) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// UnmarshalText implements the text unmarshaller method.",
  (string) (len=50) "func (x *Color) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=29) "\ttmp, err := ParseColor(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=39) "func (x *Color) Set(val string) error {",
  (string) (len=26) "\tv, err := ParseColor(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=35) "func (x *Color) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=31) "func (x *Color) Type() string {",
  (string) (len=15) "\treturn \"Color\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=55) "\t// MyPrefix_Black is a ColorWithComment of type Black.",
  (string) (len=39) "\tMyPrefix_Black ColorWithComment = iota",
  (string) (len=55) "\t// MyPrefix_White is a ColorWithComment of type White.",
  (string) (len=15) "\tMyPrefix_White",
  (string) (len=51) "\t// MyPrefix_Red is a ColorWithComment of type Red.",
  (string) (len=13) "\tMyPrefix_Red",
  (string) (len=55) "\t// MyPrefix_Green is a ColorWithComment of type Green.",
  (string) (len=15) "\tMyPrefix_Green",
  (string) (len=53) "\t// MyPrefix_Blue is a ColorWithComment of type Blue.",
  (string) (len=24) "\t// Blue starts with 33.",
  (string) (len=43) "\tMyPrefix_Blue ColorWithComment = iota + 29",
  (string) (len=53) "\t// MyPrefix_Grey is a ColorWithComment of type Grey.",
  (string) (len=14) "\tMyPrefix_Grey",
  (string) (len=57) "\t// MyPrefix_Yellow is a ColorWithComment of type Yellow.",
  (string) (len=16) "\tMyPrefix_Yellow",
  (string) (len=1) ")",
  (string) "",
  (string) (len=75) "var ErrInvalidColorWithComment = errors.New(\"not a valid ColorWithComment\")",
  (string) "",
  (string) (len=64) "const _colorWithCommentName = \"BlackWhiteRedGreenBluegreyyellow\"",
  (string) "",
  (string) (len=55) "var _colorWithCommentMap = map[ColorWithComment]string{",
  (string) (len=45) "\tMyPrefix_Black:  _colorWithCommentName[0:5],",
  (string) (len=46) "\tMyPrefix_White:  _colorWithCommentName[5:10],",
  (string) (len=47) "\tMyPrefix_Red:    _colorWithCommentName[10:13],",
  (string) (len=47) "\tMyPrefix_Green:  _colorWithCommentName[13:18],",
  (string) (len=47) "\tMyPrefix_Blue:   _colorWithCommentName[18:22],",
  (string) (len=47) "\tMyPrefix_Grey:   _colorWithCommentName[22:26],",
  (string) (len=47) "\tMyPrefix_Yellow: _colorWithCommentName[26:32],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=43) "func (x ColorWithComment) String() string {",
  (string) (len=44) "\tif str, ok := _colorWithCommentMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=46) "\treturn fmt.Sprintf(\"ColorWithComment(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "var _colorWithCommentValue = map[string]ColorWithComment{",
  (string) (len=63) "\t_colorWithCommentName[0:5]:                    MyPrefix_Black,",
  (string) (len=63) "\tstrings.ToLower(_colorWithCommentName[0:5]):   MyPrefix_Black,",
  (string) (len=63) "\t_colorWithCommentName[5:10]:                   MyPrefix_White,",
  (string) (len=63) "\tstrings.ToLower(_colorWithCommentName[5:10]):  MyPrefix_White,",
  (string) (len=61) "\t_colorWithCommentName[10:13]:                  MyPrefix_Red,",
  (string) (len=61) "\tstrings.ToLower(_colorWithCommentName[10:13]): MyPrefix_Red,",
  (string) (len=63) "\t_colorWithCommentName[13:18]:                  MyPrefix_Green,",
  (string) (len=63) "\tstrings.ToLower(_colorWithCommentName[13:18]): MyPrefix_Green,",
  (string) (len=62) "\t_colorWithCommentName[18:22]:                  MyPrefix_Blue,",
  (string) (len=62) "\tstrings.ToLower(_colorWithCommentName[18:22]): MyPrefix_Blue,",
  (string) (len=62) "\t_colorWithCommentName[22:26]:                  MyPrefix_Grey,",
  (string) (len=62) "\tstrings.ToLower(_colorWithCommentName[22:26]): MyPrefix_Grey,",
  (string) (len=64) "\t_colorWithCommentName[26:32]:                  MyPrefix_Yellow,",
  (string) (len=64) "\tstrings.ToLower(_colorWithCommentName[26:32]): MyPrefix_Yellow,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=76) "// ParseColorWithComment attempts to convert a string to a ColorWithComment.",
  (string) (len=67) "func ParseColorWithComment(name string) (ColorWithComment, error) {",
  (string) (len=47) "\tif x, ok := _colorWithCommentValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=85) "\treturn ColorWithComment(0), fmt.Errorf(\"%s is %w\", name, ErrInvalidColorWithComment)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// MarshalText implements the text marshaller method.",
  (string) (len=57) "func (x ColorWithComment) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// UnmarshalText implements the text unmarshaller method.",
  (string) (len=61) "func (x *ColorWithComment) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=40) "\ttmp, err := ParseColorWithComment(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=50) "func (x *ColorWithComment) Set(val string) error {",
  (string) (len=37) "\tv, err := ParseColorWithComment(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=46) "func (x *ColorWithComment) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=42) "func (x *ColorWithComment) Type() string {",
  (string) (len=26) "\treturn \"ColorWithComment\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=56) "\t// MyPrefix_Black is a ColorWithComment2 of type Black.",
  (string) (len=40) "\tMyPrefix_Black ColorWithComment2 = iota",
  (string) (len=56) "\t// MyPrefix_White is a ColorWithComment2 of type White.",
  (string) (len=15) "\tMyPrefix_White",
  (string) (len=52) "\t// MyPrefix_Red is a ColorWithComment2 of type Red.",
  (string) (len=13) "\tMyPrefix_Red",
  (string) (len=56) "\t// MyPrefix_Green is a ColorWithComment2 of type Green.",
  (string) (len=15) "\tMyPrefix_Green",
  (string) (len=54) "\t// MyPrefix_Blue is a ColorWithComment2 of type Blue.",
  (string) (len=23) "\t// Blue starts with 33",
  (string) (len=44) "\tMyPrefix_Blue ColorWithComment2 = iota + 29",
  (string) (len=54) "\t// MyPrefix_Grey is a ColorWithComment2 of type Grey.",
  (string) (len=14) "\tMyPrefix_Grey",
  (string) (len=58) "\t// MyPrefix_Yellow is a ColorWithComment2 of type Yellow.",
  (string) (len=16) "\tMyPrefix_Yellow",
  (string) (len=1) ")",
  (string) "",
  (string) (len=77) "var ErrInvalidColorWithComment2 = errors.New(\"not a valid ColorWithComment2\")",
  (string) "",
  (string) (len=65) "const _colorWithComment2Name = \"BlackWhiteRedGreenBluegreyyellow\"",
  (string) "",
  (string) (len=57) "var _colorWithComment2Map = map[ColorWithComment2]string{",
  (string) (len=46) "\tMyPrefix_Black:  _colorWithComment2Name[0:5],",
  (string) (len=47) "\tMyPrefix_White:  _colorWithComment2Name[5:10],",
  (string) (len=48) "\tMyPrefix_Red:    _colorWithComment2Name[10:13],",
  (string) (len=48) "\tMyPrefix_Green:  _colorWithComment2Name[13:18],",
  (string) (len=48) "\tMyPrefix_Blue:   _colorWithComment2Name[18:22],",
  (string) (len=48) "\tMyPrefix_Grey:   _colorWithComment2Name[22:26],",
  (string) (len=48) "\tMyPrefix_Yellow: _colorWithComment2Name[26:32],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=44) "func (x ColorWithComment2) String() string {",
  (string) (len=45) "\tif str, ok := _colorWithComment2Map[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=47) "\treturn fmt.Sprintf(\"ColorWithComment2(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=59) "var _colorWithComment2Value = map[string]ColorWithComment2{",
  (string) (len=64) "\t_colorWithComment2Name[0:5]:                    MyPrefix_Black,",
  (string) (len=64) "\tstrings.ToLower(_colorWithComment2Name[0:5]):   MyPrefix_Black,",
  (string) (len=64) "\t_colorWithComment2Name[5:10]:                   MyPrefix_White,",
  (string) (len=64) "\tstrings.ToLower(_colorWithComment2Name[5:10]):  MyPrefix_White,",
  (string) (len=62) "\t_colorWithComment2Name[10:13]:                  MyPrefix_Red,",
  (string) (len=62) "\tstrings.ToLower(_colorWithComment2Name[10:13]): MyPrefix_Red,",
  (string) (len=64) "\t_colorWithComment2Name[13:18]:                  MyPrefix_Green,",
  (string) (len=64) "\tstrings.ToLower(_colorWithComment2Name[13:18]): MyPrefix_Green,",
  (string) (len=63) "\t_colorWithComment2Name[18:22]:                  MyPrefix_Blue,",
  (string) (len=63) "\tstrings.ToLower(_colorWithComment2Name[18:22]): MyPrefix_Blue,",
  (string) (len=63) "\t_colorWithComment2Name[22:26]:                  MyPrefix_Grey,",
  (string) (len=63) "\tstrings.ToLower(_colorWithComment2Name[22:26]): MyPrefix_Grey,",
  (string) (len=65) "\t_colorWithComment2Name[26:32]:                  MyPrefix_Yellow,",
  (string) (len=65) "\tstrings.ToLower(_colorWithComment2Name[26:32]): MyPrefix_Yellow,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=78) "// ParseColorWithComment2 attempts to convert a string to a ColorWithComment2.",
  (string) (len=69) "func ParseColorWithComment2(name string) (ColorWithComment2, error) {",
  (string) (len=48) "\tif x, ok := _colorWithComment2Value[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=87) "\treturn ColorWithComment2(0), fmt.Errorf(\"%s is %w\", name, ErrInvalidColorWithComment2)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// MarshalText implements the text marshaller method.",
  (string) (len=58) "func (x ColorWithComment2) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// UnmarshalText implements the text unmarshaller method.",
  (string) (len=62) "func (x *ColorWithComment2) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=41) "\ttmp, err := ParseColorWithComment2(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=51) "func (x *ColorWithComment2) Set(val string) error {",
  (string) (len=38) "\tv, err := ParseColorWithComment2(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=47) "func (x *ColorWithComment2) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=43) "func (x *ColorWithComment2) Type() string {",
  (string) (len=27) "\treturn \"ColorWithComment2\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=56) "\t// MyPrefix_Black is a ColorWithComment3 of type Black.",
  (string) (len=40) "\tMyPrefix_Black ColorWithComment3 = iota",
  (string) (len=56) "\t// MyPrefix_White is a ColorWithComment3 of type White.",
  (string) (len=15) "\tMyPrefix_White",
  (string) (len=52) "\t// MyPrefix_Red is a ColorWithComment3 of type Red.",
  (string) (len=13) "\tMyPrefix_Red",
  (string) (len=56) "\t// MyPrefix_Green is a ColorWithComment3 of type Green.",
  (string) (len=24) "\t// Green starts with 33",
  (string) (len=45) "\tMyPrefix_Green ColorWithComment3 = iota + 30",
  (string) (len=54) "\t// MyPrefix_Blue is a ColorWithComment3 of type Blue.",
  (string) (len=14) "\tMyPrefix_Blue",
  (string) (len=54) "\t// MyPrefix_Grey is a ColorWithComment3 of type Grey.",
  (string) (len=14) "\tMyPrefix_Grey",
  (string) (len=58) "\t// MyPrefix_Yellow is a ColorWithComment3 of type Yellow.",
  (string) (len=16) "\tMyPrefix_Yellow",
  (string) (len=65) "\t// MyPrefix_BlueGreen is a ColorWithComment3 of type Blue-Green.",
  (string) (len=22) "\t// blue-green comment",
  (string) (len=19) "\tMyPrefix_BlueGreen",
  (string) (len=65) "\t// MyPrefix_RedOrange is a ColorWithComment3 of type Red-Orange.",
  (string) (len=19) "\tMyPrefix_RedOrange",
  (string) (len=74) "\t// MyPrefix_RedOrangeBlue is a ColorWithComment3 of type Red-Orange-Blue.",
  (string) (len=23) "\tMyPrefix_RedOrangeBlue",
  (string) (len=1) ")",
  (string) "",
  (string) (len=77) "var ErrInvalidColorWithComment3 = errors.New(\"not a valid ColorWithComment3\")",
  (string) "",
  (string) (len=100) "const _colorWithComment3Name = \"BlackWhiteRedGreenBluegreyyellowblue-greenred-orangered-orange-blue\"",
  (string) "",
  (string) (len=57) "var _colorWithComment3Map = map[ColorWithComment3]string{",
  (string) (len=53) "\tMyPrefix_Black:         _colorWithComment3Name[0:5],",
  (string) (len=54) "\tMyPrefix_White:         _colorWithComment3Name[5:10],",
  (string) (len=55) "\tMyPrefix_Red:           _colorWithComment3Name[10:13],",
  (string) (len=55) "\tMyPrefix_Green:         _colorWithComment3Name[13:18],",
  (string) (len=55) "\tMyPrefix_Blue:          _colorWithComment3Name[18:22],",
  (string) (len=55) "\tMyPrefix_Grey:          _colorWithComment3Name[22:26],",
  (string) (len=55) "\tMyPrefix_Yellow:        _colorWithComment3Name[26:32],",
  (string) (len=55) "\tMyPrefix_BlueGreen:     _colorWithComment3Name[32:42],",
  (string) (len=55) "\tMyPrefix_RedOrange:     _colorWithComment3Name[42:52],",
  (string) (len=55) "\tMyPrefix_RedOrangeBlue: _colorWithComment3Name[52:67],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=44) "func (x ColorWithComment3) String() string {",
  (string) (len=45) "\tif str, ok := _colorWithComment3Map[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=47) "\treturn fmt.Sprintf(\"ColorWithComment3(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=59) "var _colorWithComment3Value = map[string]ColorWithComment3{",
  (string) (len=64) "\t_colorWithComment3Name[0:5]:                    MyPrefix_Black,",
  (string) (len=64) "\tstrings.ToLower(_colorWithComment3Name[0:5]):   MyPrefix_Black,",
  (string) (len=64) "\t_colorWithComment3Name[5:10]:                   MyPrefix_White,",
  (string) (len=64) "\tstrings.ToLower(_colorWithComment3Name[5:10]):  MyPrefix_White,",
  (string) (len=62) "\t_colorWithComment3Name[10:13]:                  MyPrefix_Red,",
  (string) (len=62) "\tstrings.ToLower(_colorWithComment3Name[10:13]): MyPrefix_Red,",
  (string) (len=64) "\t_colorWithComment3Name[13:18]:                  MyPrefix_Green,",
  (string) (len=64) "\tstrings.ToLower(_colorWithComment3Name[13:18]): MyPrefix_Green,",
  (string) (len=63) "\t_colorWithComment3Name[18:22]:                  MyPrefix_Blue,",
  (string) (len=63) "\tstrings.ToLower(_colorWithComment3Name[18:22]): MyPrefix_Blue,",
  (string) (len=63) "\t_colorWithComment3Name[22:26]:                  MyPrefix_Grey,",
  (string) (len=63) "\tstrings.ToLower(_colorWithComment3Name[22:26]): MyPrefix_Grey,",
  (string) (len=65) "\t_colorWithComment3Name[26:32]:                  MyPrefix_Yellow,",
  (string) (len=65) "\tstrings.ToLower(_colorWithComment3Name[26:32]): MyPrefix_Yellow,",
  (string) (len=68) "\t_colorWithComment3Name[32:42]:                  MyPrefix_BlueGreen,",
  (string) (len=68) "\tstrings.ToLower(_colorWithComment3Name[32:42]): MyPrefix_BlueGreen,",
  (string) (len=68) "\t_colorWithComment3Name[42:52]:                  MyPrefix_RedOrange,",
  (string) (len=68) "\tstrings.ToLower(_colorWithComment3Name[42:52]): MyPrefix_RedOrange,",
  (string) (len=72) "\t_colorWithComment3Name[52:67]:                  MyPrefix_RedOrangeBlue,",
  (string) (len=72) "\tstrings.ToLower(_colorWithComment3Name[52:67]): MyPrefix_RedOrangeBlue,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=78) "// ParseColorWithComment3 attempts to convert a string to a ColorWithComment3.",
  (string) (len=69) "func ParseColorWithComment3(name string) (ColorWithComment3, error) {",
  (string) (len=48) "\tif x, ok := _colorWithComment3Value[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=87) "\treturn ColorWithComment3(0), fmt.Errorf(\"%s is %w\", name, ErrInvalidColorWithComment3)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// MarshalText implements the text marshaller method.",
  (string) (len=58) "func (x ColorWithComment3) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// UnmarshalText implements the text unmarshaller method.",
  (string) (len=62) "func (x *ColorWithComment3) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=41) "\ttmp, err := ParseColorWithComment3(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=51) "func (x *ColorWithComment3) Set(val string) error {",
  (string) (len=38) "\tv, err := ParseColorWithComment3(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=47) "func (x *ColorWithComment3) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=43) "func (x *ColorWithComment3) Type() string {",
  (string) (len=27) "\treturn \"ColorWithComment3\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=18) "\t// Skipped value.",
  (string) (len=15) "\t// Placeholder",
  (string) (len=27) "\t_ ColorWithComment4 = iota",
  (string) (len=56) "\t// MyPrefix_Black is a ColorWithComment4 of type Black.",
  (string) (len=15) "\tMyPrefix_Black",
  (string) (len=56) "\t// MyPrefix_White is a ColorWithComment4 of type White.",
  (string) (len=15) "\tMyPrefix_White",
  (string) (len=52) "\t// MyPrefix_Red is a ColorWithComment4 of type Red.",
  (string) (len=13) "\tMyPrefix_Red",
  (string) (len=56) "\t// MyPrefix_Green is a ColorWithComment4 of type Green.",
  (string) (len=24) "\t// Green starts with 33",
  (string) (len=45) "\tMyPrefix_Green ColorWithComment4 = iota + 29",
  (string) (len=54) "\t// MyPrefix_Blue is a ColorWithComment4 of type Blue.",
  (string) (len=14) "\tMyPrefix_Blue",
  (string) (len=54) "\t// MyPrefix_Grey is a ColorWithComment4 of type Grey.",
  (string) (len=14) "\tMyPrefix_Grey",
  (string) (len=58) "\t// MyPrefix_Yellow is a ColorWithComment4 of type Yellow.",
  (string) (len=110) "\t// Where did all the (somewhat) bad fish go? (something else that goes in parentheses at the end of the line)",
  (string) (len=16) "\tMyPrefix_Yellow",
  (string) (len=65) "\t// MyPrefix_BlueGreen is a ColorWithComment4 of type Blue-Green.",
  (string) (len=22) "\t// blue-green comment",
  (string) (len=19) "\tMyPrefix_BlueGreen",
  (string) (len=65) "\t// MyPrefix_RedOrange is a ColorWithComment4 of type Red-Orange.",
  (string) (len=20) "\t// has a , in it!?!",
  (string) (len=19) "\tMyPrefix_RedOrange",
  (string) (len=1) ")",
  (string) "",
  (string) (len=77) "var ErrInvalidColorWithComment4 = errors.New(\"not a valid ColorWithComment4\")",
  (string) "",
  (string) (len=85) "const _colorWithComment4Name = \"BlackWhiteRedGreenBluegreyyellowblue-greenred-orange\"",
  (string) "",
  (string) (len=57) "var _colorWithComment4Map = map[ColorWithComment4]string{",
  (string) (len=49) "\tMyPrefix_Black:     _colorWithComment4Name[0:5],",
  (string) (len=50) "\tMyPrefix_White:     _colorWithComment4Name[5:10],",
  (string) (len=51) "\tMyPrefix_Red:       _colorWithComment4Name[10:13],",
  (string) (len=51) "\tMyPrefix_Green:     _colorWithComment4Name[13:18],",
  (string) (len=51) "\tMyPrefix_Blue:      _colorWithComment4Name[18:22],",
  (string) (len=51) "\tMyPrefix_Grey:      _colorWithComment4Name[22:26],",
  (string) (len=51) "\tMyPrefix_Yellow:    _colorWithComment4Name[26:32],",
  (string) (len=51) "\tMyPrefix_BlueGreen: _colorWithComment4Name[32:42],",
  (string) (len=51) "\tMyPrefix_RedOrange: _colorWithComment4Name[42:52],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=44) "func (x ColorWithComment4) String() string {",
  (string) (len=45) "\tif str, ok := _colorWithComment4Map[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=47) "\treturn fmt.Sprintf(\"ColorWithComment4(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=59) "var _colorWithComment4Value = map[string]ColorWithComment4{",
  (string) (len=64) "\t_colorWithComment4Name[0:5]:                    MyPrefix_Black,",
  (string) (len=64) "\tstrings.ToLower(_colorWithComment4Name[0:5]):   MyPrefix_Black,",
  (string) (len=64) "\t_colorWithComment4Name[5:10]:                   MyPrefix_White,",
  (string) (len=64) "\tstrings.ToLower(_colorWithComment4Name[5:10]):  MyPrefix_White,",
  (string) (len=62) "\t_colorWithComment4Name[10:13]:                  MyPrefix_Red,",
  (string) (len=62) "\tstrings.ToLower(_colorWithComment4Name[10:13]): MyPrefix_Red,",
  (string) (len=64) "\t_colorWithComment4Name[13:18]:                  MyPrefix_Green,",
  (string) (len=64) "\tstrings.ToLower(_colorWithComment4Name[13:18]): MyPrefix_Green,",
  (string) (len=63) "\t_colorWithComment4Name[18:22]:                  MyPrefix_Blue,",
  (string) (len=63) "\tstrings.ToLower(_colorWithComment4Name[18:22]): MyPrefix_Blue,",
  (string) (len=63) "\t_colorWithComment4Name[22:26]:                  MyPrefix_Grey,",
  (string) (len=63) "\tstrings.ToLower(_colorWithComment4Name[22:26]): MyPrefix_Grey,",
  (string) (len=65) "\t_colorWithComment4Name[26:32]:                  MyPrefix_Yellow,",
  (string) (len=65) "\tstrings.ToLower(_colorWithComment4Name[26:32]): MyPrefix_Yellow,",
  (string) (len=68) "\t_colorWithComment4Name[32:42]:                  MyPrefix_BlueGreen,",
  (string) (len=68) "\tstrings.ToLower(_colorWithComment4Name[32:42]): MyPrefix_BlueGreen,",
  (string) (len=68) "\t_colorWithComment4Name[42:52]:                  MyPrefix_RedOrange,",
  (string) (len=68) "\tstrings.ToLower(_colorWithComment4Name[42:52]): MyPrefix_RedOrange,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=78) "// ParseColorWithComment4 attempts to convert a string to a ColorWithComment4.",
  (string) (len=69) "func ParseColorWithComment4(name string) (ColorWithComment4, error) {",
  (string) (len=48) "\tif x, ok := _colorWithComment4Value[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=87) "\treturn ColorWithComment4(0), fmt.Errorf(\"%s is %w\", name, ErrInvalidColorWithComment4)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// MarshalText implements the text marshaller method.",
  (string) (len=58) "func (x ColorWithComment4) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// UnmarshalText implements the text unmarshaller method.",
  (string) (len=62) "func (x *ColorWithComment4) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=41) "\ttmp, err := ParseColorWithComment4(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=51) "func (x *ColorWithComment4) Set(val string) error {",
  (string) (len=38) "\tv, err := ParseColorWithComment4(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=47) "func (x *ColorWithComment4) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=43) "func (x *ColorWithComment4) Type() string {",
  (string) (len=27) "\treturn \"ColorWithComment4\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=52) "\t// MyPrefix_Unknown is a Enum64bit of type Unknown.",
  (string) (len=34) "\tMyPrefix_Unknown Enum64bit = iota",
  (string) (len=48) "\t// MyPrefix_E2P15 is a Enum64bit of type E2P15.",
  (string) (len=40) "\tMyPrefix_E2P15 Enum64bit = iota + 32767",
  (string) (len=48) "\t// MyPrefix_E2P16 is a Enum64bit of type E2P16.",
  (string) (len=40) "\tMyPrefix_E2P16 Enum64bit = iota + 65534",
  (string) (len=48) "\t// MyPrefix_E2P17 is a Enum64bit of type E2P17.",
  (string) (len=41) "\tMyPrefix_E2P17 Enum64bit = iota + 131069",
  (string) (len=48) "\t// MyPrefix_E2P18 is a Enum64bit of type E2P18.",
  (string) (len=41) "\tMyPrefix_E2P18 Enum64bit = iota + 262140",
  (string) (len=48) "\t// MyPrefix_E2P19 is a Enum64bit of type E2P19.",
  (string) (len=41) "\tMyPrefix_E2P19 Enum64bit = iota + 524283",
  (string) (len=48) "\t// MyPrefix_E2P20 is a Enum64bit of type E2P20.",
  (string) (len=42) "\tMyPrefix_E2P20 Enum64bit = iota + 1048570",
  (string) (len=48) "\t// MyPrefix_E2P21 is a Enum64bit of type E2P21.",
  (string) (len=42) "\tMyPrefix_E2P21 Enum64bit = iota + 2097145",
  (string) (len=48) "\t// MyPrefix_E2P22 is a Enum64bit of type E2P22.",
  (string) (len=43) "\tMyPrefix_E2P22 Enum64bit = iota + 33554424",
  (string) (len=48) "\t// MyPrefix_E2P23 is a Enum64bit of type E2P23.",
  (string) (len=43) "\tMyPrefix_E2P23 Enum64bit = iota + 67108855",
  (string) (len=48) "\t// MyPrefix_E2P28 is a Enum64bit of type E2P28.",
  (string) (len=44) "\tMyPrefix_E2P28 Enum64bit = iota + 536870902",
  (string) (len=48) "\t// MyPrefix_E2P30 is a Enum64bit of type E2P30.",
  (string) (len=45) "\tMyPrefix_E2P30 Enum64bit = iota + 1073741813",
  (string) (len=48) "\t// MyPrefix_E2P31 is a Enum64bit of type E2P31.",
  (string) (len=45) "\tMyPrefix_E2P31 Enum64bit = iota + 2147483636",
  (string) (len=48) "\t// MyPrefix_E2P32 is a Enum64bit of type E2P32.",
  (string) (len=45) "\tMyPrefix_E2P32 Enum64bit = iota + 4294967283",
  (string) (len=48) "\t// MyPrefix_E2P33 is a Enum64bit of type E2P33.",
  (string) (len=45) "\tMyPrefix_E2P33 Enum64bit = iota + 8454967282",
  (string) (len=1) ")",
  (string) "",
  (string) (len=61) "var ErrInvalidEnum64bit = errors.New(\"not a valid Enum64bit\")",
  (string) "",
  (string) (len=102) "const _enum64bitName = \"UnknownE2P15E2P16E2P17E2P18E2P19E2P20E2P21E2P22E2P23E2P28E2P30E2P31E2P32E2P33\"",
  (string) "",
  (string) (len=41) "var _enum64bitMap = map[Enum64bit]string{",
  (string) (len=39) "\tMyPrefix_Unknown: _enum64bitName[0:7],",
  (string) (len=40) "\tMyPrefix_E2P15:   _enum64bitName[7:12],",
  (string) (len=41) "\tMyPrefix_E2P16:   _enum64bitName[12:17],",
  (string) (len=41) "\tMyPrefix_E2P17:   _enum64bitName[17:22],",
  (string) (len=41) "\tMyPrefix_E2P18:   _enum64bitName[22:27],",
  (string) (len=41) "\tMyPrefix_E2P19:   _enum64bitName[27:32],",
  (string) (len=41) "\tMyPrefix_E2P20:   _enum64bitName[32:37],",
  (string) (len=41) "\tMyPrefix_E2P21:   _enum64bitName[37:42],",
  (string) (len=41) "\tMyPrefix_E2P22:   _enum64bitName[42:47],",
  (string) (len=41) "\tMyPrefix_E2P23:   _enum64bitName[47:52],",
  (string) (len=41) "\tMyPrefix_E2P28:   _enum64bitName[52:57],",
  (string) (len=41) "\tMyPrefix_E2P30:   _enum64bitName[57:62],",
  (string) (len=41) "\tMyPrefix_E2P31:   _enum64bitName[62:67],",
  (string) (len=41) "\tMyPrefix_E2P32:   _enum64bitName[67:72],",
  (string) (len=41) "\tMyPrefix_E2P33:   _enum64bitName[72:77],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=36) "func (x Enum64bit) String() string {",
  (string) (len=37) "\tif str, ok := _enum64bitMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=39) "\treturn fmt.Sprintf(\"Enum64bit(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=43) "var _enum64bitValue = map[string]Enum64bit{",
  (string) (len=58) "\t_enum64bitName[0:7]:                    MyPrefix_Unknown,",
  (string) (len=58) "\tstrings.ToLower(_enum64bitName[0:7]):   MyPrefix_Unknown,",
  (string) (len=56) "\t_enum64bitName[7:12]:                   MyPrefix_E2P15,",
  (string) (len=56) "\tstrings.ToLower(_enum64bitName[7:12]):  MyPrefix_E2P15,",
  (string) (len=56) "\t_enum64bitName[12:17]:                  MyPrefix_E2P16,",
  (string) (len=56) "\tstrings.ToLower(_enum64bitName[12:17]): MyPrefix_E2P16,",
  (string) (len=56) "\t_enum64bitName[17:22]:                  MyPrefix_E2P17,",
  (string) (len=56) "\tstrings.ToLower(_enum64bitName[17:22]): MyPrefix_E2P17,",
  (string) (len=56) "\t_enum64bitName[22:27]:                  MyPrefix_E2P18,",
  (string) (len=56) "\tstrings.ToLower(_enum64bitName[22:27]): MyPrefix_E2P18,",
  (string) (len=56) "\t_enum64bitName[27:32]:                  MyPrefix_E2P19,",
  (string) (len=56) "\tstrings.ToLower(_enum64bitName[27:32]): MyPrefix_E2P19,",
  (string) (len=56) "\t_enum64bitName[32:37]:                  MyPrefix_E2P20,",
  (string) (len=56) "\tstrings.ToLower(_enum64bitName[32:37]): MyPrefix_E2P20,",
  (string) (len=56) "\t_enum64bitName[37:42]:                  MyPrefix_E2P21,",
  (string) (len=56) "\tstrings.ToLower(_enum64bitName[37:42]): MyPrefix_E2P21,",
  (string) (len=56) "\t_enum64bitName[42:47]:                  MyPrefix_E2P22,",
  (string) (len=56) "\tstrings.ToLower(_enum64bitName[42:47]): MyPrefix_E2P22,",
  (string) (len=56) "\t_enum64bitName[47:52]:                  MyPrefix_E2P23,",
  (string) (len=56) "\tstrings.ToLower(_enum64bitName[47:52]): MyPrefix_E2P23,",
  (string) (len=56) "\t_enum64bitName[52:57]:                  MyPrefix_E2P28,",
  (string) (len=56) "\tstrings.ToLower(_enum64bitName[52:57]): MyPrefix_E2P28,",
  (string) (len=56) "\t_enum64bitName[57:62]:                  MyPrefix_E2P30,",
  (string) (len=56) "\tstrings.ToLower(_enum64bitName[57:62]): MyPrefix_E2P30,",
  (string) (len=56) "\t_enum64bitName[62:67]:                  MyPrefix_E2P31,",
  (string) (len=56) "\tstrings.ToLower(_enum64bitName[62:67]): MyPrefix_E2P31,",
  (string) (len=56) "\t_enum64bitName[67:72]:                  MyPrefix_E2P32,",
  (string) (len=56) "\tstrings.ToLower(_enum64bitName[67:72]): MyPrefix_E2P32,",
  (string) (len=56) "\t_enum64bitName[72:77]:                  MyPrefix_E2P33,",
  (string) (len=56) "\tstrings.ToLower(_enum64bitName[72:77]): MyPrefix_E2P33,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// ParseEnum64bit attempts to convert a string to a Enum64bit.",
  (string) (len=53) "func ParseEnum64bit(name string) (Enum64bit, error) {",
  (string) (len=40) "\tif x, ok := _enum64bitValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=71) "\treturn Enum64bit(0), fmt.Errorf(\"%s is %w\", name, ErrInvalidEnum64bit)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// MarshalText implements the text marshaller method.",
  (string) (len=50) "func (x Enum64bit) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// UnmarshalText implements the text unmarshaller method.",
  (string) (len=54) "func (x *Enum64bit) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=33) "\ttmp, err := ParseEnum64bit(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=43) "func (x *Enum64bit) Set(val string) error {",
  (string) (len=30) "\tv, err := ParseEnum64bit(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=39) "func (x *Enum64bit) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=35) "func (x *Enum64bit) Type() string {",
  (string) (len=19) "\treturn \"Enum64bit\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=46) "\t// MyPrefix_Toyota is a Model of type Toyota.",
  (string) (len=29) "\tMyPrefix_Toyota Model = iota",
  (string) (len=18) "\t// Skipped value.",
  (string) (len=2) "\t_",
  (string) (len=44) "\t// MyPrefix_Chevy is a Model of type Chevy.",
  (string) (len=15) "\tMyPrefix_Chevy",
  (string) (len=18) "\t// Skipped value.",
  (string) (len=2) "\t_",
  (string) (len=42) "\t// MyPrefix_Ford is a Model of type Ford.",
  (string) (len=14) "\tMyPrefix_Ford",
  (string) (len=1) ")",
  (string) "",
  (string) (len=53) "var ErrInvalidModel = errors.New(\"not a valid Model\")",
  (string) "",
  (string) (len=36) "const _modelName = \"ToyotaChevyFord\"",
  (string) "",
  (string) (len=33) "var _modelMap = map[Model]string{",
  (string) (len=34) "\tMyPrefix_Toyota: _modelName[0:6],",
  (string) (len=35) "\tMyPrefix_Chevy:  _modelName[6:11],",
  (string) (len=36) "\tMyPrefix_Ford:   _modelName[11:15],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=32) "func (x Model) String() string {",
  (string) (len=33) "\tif str, ok := _modelMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=35) "\treturn fmt.Sprintf(\"Model(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "var _modelValue = map[string]Model{",
  (string) (len=53) "\t_modelName[0:6]:                    MyPrefix_Toyota,",
  (string) (len=53) "\tstrings.ToLower(_modelName[0:6]):   MyPrefix_Toyota,",
  (string) (len=52) "\t_modelName[6:11]:                   MyPrefix_Chevy,",
  (string) (len=52) "\tstrings.ToLower(_modelName[6:11]):  MyPrefix_Chevy,",
  (string) (len=51) "\t_modelName[11:15]:                  MyPrefix_Ford,",
  (string) (len=51) "\tstrings.ToLower(_modelName[11:15]): MyPrefix_Ford,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=54) "// ParseModel attempts to convert a string to a Model.",
  (string) (len=45) "func ParseModel(name string) (Model, error) {",
  (string) (len=36) "\tif x, ok := _modelValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=63) "\treturn Model(0), fmt.Errorf(\"%s is %w\", name, ErrInvalidModel)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// MarshalText implements the text marshaller method.",
  (string) (len=46) "func (x Model) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// UnmarshalText implements the text unmarshaller method.",
  (string) (len=50) "func (x *Model) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=29) "\ttmp, err := ParseModel(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=39) "func (x *Model) Set(val string) error {",
  (string) (len=26) "\tv, err := ParseModel(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=35) "func (x *Model) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=31) "func (x *Model) Type() string {",
  (string) (len=15) "\treturn \"Model\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=61) "\t// MyPrefix_Продам is a NonASCII of type Продам.",
  (string) (len=45) "\tMyPrefix_Продам NonASCII = iota + 1114",
  (string) (len=49) "\t// MyPrefix_車庫 is a NonASCII of type 車庫.",
  (string) (len=38) "\tMyPrefix_車庫 NonASCII = iota + 299",
  (string) (len=53) "\t// MyPrefix_Էժան is a NonASCII of type Էժան.",
  (string) (len=39) "\tMyPrefix_Էժան NonASCII = iota + -1",
  (string) (len=1) ")",
  (string) "",
  (string) (len=59) "var ErrInvalidNonASCII = errors.New(\"not a valid NonASCII\")",
  (string) "",
  (string) (len=50) "const _nonASCIIName = \"Продам車庫էժան\"",
  (string) "",
  (string) (len=39) "var _nonASCIIMap = map[NonASCII]string{",
  (string) (len=44) "\tMyPrefix_Продам: _nonASCIIName[0:12],",
  (string) (len=43) "\tMyPrefix_車庫:     _nonASCIIName[12:18],",
  (string) (len=43) "\tMyPrefix_Էժան:   _nonASCIIName[18:26],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=35) "func (x NonASCII) String() string {",
  (string) (len=36) "\tif str, ok := _nonASCIIMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=38) "\treturn fmt.Sprintf(\"NonASCII(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "var _nonASCIIValue = map[string]NonASCII{",
  (string) (len=62) "\t_nonASCIIName[0:12]:                   MyPrefix_Продам,",
  (string) (len=62) "\tstrings.ToLower(_nonASCIIName[0:12]):  MyPrefix_Продам,",
  (string) (len=56) "\t_nonASCIIName[12:18]:                  MyPrefix_車庫,",
  (string) (len=56) "\tstrings.ToLower(_nonASCIIName[12:18]): MyPrefix_車庫,",
  (string) (len=58) "\t_nonASCIIName[18:26]:                  MyPrefix_Էժան,",
  (string) (len=58) "\tstrings.ToLower(_nonASCIIName[18:26]): MyPrefix_Էժան,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=60) "// ParseNonASCII attempts to convert a string to a NonASCII.",
  (string) (len=51) "func ParseNonASCII(name string) (NonASCII, error) {",
  (string) (len=39) "\tif x, ok := _nonASCIIValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=69) "\treturn NonASCII(0), fmt.Errorf(\"%s is %w\", name, ErrInvalidNonASCII)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// MarshalText implements the text marshaller method.",
  (string) (len=49) "func (x NonASCII) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// UnmarshalText implements the text unmarshaller method.",
  (string) (len=53) "func (x *NonASCII) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=32) "\ttmp, err := ParseNonASCII(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=42) "func (x *NonASCII) Set(val string) error {",
  (string) (len=29) "\tv, err := ParseNonASCII(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=38) "func (x *NonASCII) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=34) "func (x *NonASCII) Type() string {",
  (string) (len=18) "\treturn \"NonASCII\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=60) "\t// MyPrefix_TestHyphen is a Sanitizing of type Test-Hyphen.",
  (string) (len=38) "\tMyPrefix_TestHyphen Sanitizing = iota",
  (string) (len=62) "\t// MyPrefix_HyphenStart is a Sanitizing of type -HyphenStart.",
  (string) (len=21) "\tMyPrefix_HyphenStart",
  (string) (len=71) "\t// MyPrefix__UnderscoreFirst is a Sanitizing of type _UnderscoreFirst.",
  (string) (len=26) "\tMyPrefix__UnderscoreFirst",
  (string) (len=63) "\t// MyPrefix_0NumberFirst is a Sanitizing of type 0NumberFirst.",
  (string) (len=22) "\tMyPrefix_0NumberFirst",
  (string) (len=59) "\t// MyPrefix_123456789A is a Sanitizing of type 123456789A.",
  (string) (len=20) "\tMyPrefix_123456789A",
  (string) (len=60) "\t// MyPrefix_123123Asdf is a Sanitizing of type 123123-Asdf.",
  (string) (len=20) "\tMyPrefix_123123Asdf",
  (string) (len=65) "\t// MyPrefix_EndingHyphen is a Sanitizing of type Ending-Hyphen-.",
  (string) (len=22) "\tMyPrefix_EndingHyphen",
  (string) (len=1) ")",
  (string) "",
  (string) (len=63) "var ErrInvalidSanitizing = errors.New(\"not a valid Sanitizing\")",
  (string) "",
  (string) (len=112) "const _sanitizingName = \"test-Hyphen-hyphenStart_underscoreFirst0numberFirst123456789a123123-asdfending-hyphen-\"",
  (string) "",
  (string) (len=43) "var _sanitizingMap = map[Sanitizing]string{",
  (string) (len=50) "\tMyPrefix_TestHyphen:       _sanitizingName[0:11],",
  (string) (len=51) "\tMyPrefix_HyphenStart:      _sanitizingName[11:23],",
  (string) (len=51) "\tMyPrefix__UnderscoreFirst: _sanitizingName[23:39],",
  (string) (len=51) "\tMyPrefix_0NumberFirst:     _sanitizingName[39:51],",
  (string) (len=51) "\tMyPrefix_123456789A:       _sanitizingName[51:61],",
  (string) (len=51) "\tMyPrefix_123123Asdf:       _sanitizingName[61:72],",
  (string) (len=51) "\tMyPrefix_EndingHyphen:     _sanitizingName[72:86],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=37) "func (x Sanitizing) String() string {",
  (string) (len=38) "\tif str, ok := _sanitizingMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=40) "\treturn fmt.Sprintf(\"Sanitizing(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=45) "var _sanitizingValue = map[string]Sanitizing{",
  (string) (len=62) "\t_sanitizingName[0:11]:                   MyPrefix_TestHyphen,",
  (string) (len=62) "\tstrings.ToLower(_sanitizingName[0:11]):  MyPrefix_TestHyphen,",
  (string) (len=63) "\t_sanitizingName[11:23]:                  MyPrefix_HyphenStart,",
  (string) (len=63) "\tstrings.ToLower(_sanitizingName[11:23]): MyPrefix_HyphenStart,",
  (string) (len=68) "\t_sanitizingName[23:39]:                  MyPrefix__UnderscoreFirst,",
  (string) (len=68) "\tstrings.ToLower(_sanitizingName[23:39]): MyPrefix__UnderscoreFirst,",
  (string) (len=64) "\t_sanitizingName[39:51]:                  MyPrefix_0NumberFirst,",
  (string) (len=64) "\tstrings.ToLower(_sanitizingName[39:51]): MyPrefix_0NumberFirst,",
  (string) (len=62) "\t_sanitizingName[51:61]:                  MyPrefix_123456789A,",
  (string) (len=62) "\tstrings.ToLower(_sanitizingName[51:61]): MyPrefix_123456789A,",
  (string) (len=62) "\t_sanitizingName[61:72]:                  MyPrefix_123123Asdf,",
  (string) (len=62) "\tstrings.ToLower(_sanitizingName[61:72]): MyPrefix_123123Asdf,",
  (string) (len=64) "\t_sanitizingName[72:86]:                  MyPrefix_EndingHyphen,",
  (string) (len=64) "\tstrings.ToLower(_sanitizingName[72:86]): MyPrefix_EndingHyphen,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=64) "// ParseSanitizing attempts to convert a string to a Sanitizing.",
  (string) (len=55) "func ParseSanitizing(name string) (Sanitizing, error) {",
  (string) (len=41) "\tif x, ok := _sanitizingValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=73) "\treturn Sanitizing(0), fmt.Errorf(\"%s is %w\", name, ErrInvalidSanitizing)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// MarshalText implements the text marshaller method.",
  (string) (len=51) "func (x Sanitizing) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// UnmarshalText implements the text unmarshaller method.",
  (string) (len=55) "func (x *Sanitizing) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=34) "\ttmp, err := ParseSanitizing(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=44) "func (x *Sanitizing) Set(val string) error {",
  (string) (len=31) "\tv, err := ParseSanitizing(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=40) "func (x *Sanitizing) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=36) "func (x *Sanitizing) Type() string {",
  (string) (len=20) "\treturn \"Sanitizing\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=41) "\t// MyPrefix_Coke is a Soda of type Coke.",
  (string) (len=26) "\tMyPrefix_Coke Soda = iota",
  (string) (len=43) "\t// MyPrefix_Pepsi is a Soda of type Pepsi.",
  (string) (len=15) "\tMyPrefix_Pepsi",
  (string) (len=45) "\t// MyPrefix_MtnDew is a Soda of type MtnDew.",
  (string) (len=16) "\tMyPrefix_MtnDew",
  (string) (len=1) ")",
  (string) "",
  (string) (len=51) "var ErrInvalidSoda = errors.New(\"not a valid Soda\")",
  (string) "",
  (string) (len=35) "const _sodaName = \"CokePepsiMtnDew\"",
  (string) "",
  (string) (len=31) "var _sodaMap = map[Soda]string{",
  (string) (len=33) "\tMyPrefix_Coke:   _sodaName[0:4],",
  (string) (len=33) "\tMyPrefix_Pepsi:  _sodaName[4:9],",
  (string) (len=34) "\tMyPrefix_MtnDew: _sodaName[9:15],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=31) "func (x Soda) String() string {",
  (string) (len=32) "\tif str, ok := _sodaMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=34) "\treturn fmt.Sprintf(\"Soda(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=33) "var _sodaValue = map[string]Soda{",
  (string) (len=49) "\t_sodaName[0:4]:                   MyPrefix_Coke,",
  (string) (len=49) "\tstrings.ToLower(_sodaName[0:4]):  MyPrefix_Coke,",
  (string) (len=50) "\t_sodaName[4:9]:                   MyPrefix_Pepsi,",
  (string) (len=50) "\tstrings.ToLower(_sodaName[4:9]):  MyPrefix_Pepsi,",
  (string) (len=51) "\t_sodaName[9:15]:                  MyPrefix_MtnDew,",
  (string) (len=51) "\tstrings.ToLower(_sodaName[9:15]): MyPrefix_MtnDew,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// ParseSoda attempts to convert a string to a Soda.",
  (string) (len=43) "func ParseSoda(name string) (Soda, error) {",
  (string) (len=35) "\tif x, ok := _sodaValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=61) "\treturn Soda(0), fmt.Errorf(\"%s is %w\", name, ErrInvalidSoda)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// MarshalText implements the text marshaller method.",
  (string) (len=45) "func (x Soda) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// UnmarshalText implements the text unmarshaller method.",
  (string) (len=49) "func (x *Soda) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=28) "\ttmp, err := ParseSoda(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=38) "func (x *Soda) Set(val string) error {",
  (string) (len=25) "\tv, err := ParseSoda(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=34) "func (x *Soda) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=30) "func (x *Soda) Type() string {",
  (string) (len=14) "\treturn \"Soda\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=65) "\t// MyPrefix_StartWithNum is a StartNotZero of type StartWithNum.",
  (string) (len=47) "\tMyPrefix_StartWithNum StartNotZero = iota + 23",
  (string) (len=55) "\t// MyPrefix_NextNum is a StartNotZero of type NextNum.",
  (string) (len=17) "\tMyPrefix_NextNum",
  (string) (len=1) ")",
  (string) "",
  (string) (len=67) "var ErrInvalidStartNotZero = errors.New(\"not a valid StartNotZero\")",
  (string) "",
  (string) (len=47) "const _startNotZeroName = \"startWithNumnextNum\"",
  (string) "",
  (string) (len=47) "var _startNotZeroMap = map[StartNotZero]string{",
  (string) (len=48) "\tMyPrefix_StartWithNum: _startNotZeroName[0:12],",
  (string) (len=49) "\tMyPrefix_NextNum:      _startNotZeroName[12:19],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=39) "func (x StartNotZero) String() string {",
  (string) (len=40) "\tif str, ok := _startNotZeroMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=42) "\treturn fmt.Sprintf(\"StartNotZero(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=49) "var _startNotZeroValue = map[string]StartNotZero{",
  (string) (len=66) "\t_startNotZeroName[0:12]:                   MyPrefix_StartWithNum,",
  (string) (len=66) "\tstrings.ToLower(_startNotZeroName[0:12]):  MyPrefix_StartWithNum,",
  (string) (len=61) "\t_startNotZeroName[12:19]:                  MyPrefix_NextNum,",
  (string) (len=61) "\tstrings.ToLower(_startNotZeroName[12:19]): MyPrefix_NextNum,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=68) "// ParseStartNotZero attempts to convert a string to a StartNotZero.",
  (string) (len=59) "func ParseStartNotZero(name string) (StartNotZero, error) {",
  (string) (len=43) "\tif x, ok := _startNotZeroValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=77) "\treturn StartNotZero(0), fmt.Errorf(\"%s is %w\", name, ErrInvalidStartNotZero)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// MarshalText implements the text marshaller method.",
  (string) (len=53) "func (x StartNotZero) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// UnmarshalText implements the text unmarshaller method.",
  (string) (len=57) "func (x *StartNotZero) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=36) "\ttmp, err := ParseStartNotZero(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=46) "func (x *StartNotZero) Set(val string) error {",
  (string) (len=33) "\tv, err := ParseStartNotZero(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=42) "func (x *StartNotZero) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=38) "func (x *StartNotZero) Type() string {",
  (string) (len=22) "\treturn \"StartNotZero\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=51) "\t// MyPrefix_Random is a StringEnum of type random.",
  (string) (len=38) "\tMyPrefix_Random StringEnum = \"random\"",
  (string) (len=51) "\t// MyPrefix_Values is a StringEnum of type values.",
  (string) (len=38) "\tMyPrefix_Values StringEnum = \"values\"",
  (string) (len=47) "\t// MyPrefix_Here is a StringEnum of type here.",
  (string) (len=34) "\tMyPrefix_Here StringEnum = \"here\"",
  (string) (len=1) ")",
  (string) "",
  (string) (len=63) "var ErrInvalidStringEnum = errors.New(\"not a valid StringEnum\")",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=37) "func (x StringEnum) String() string {",
  (string) (len=17) "\treturn string(x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=36) "func (x StringEnum) IsValid() bool {",
  (string) (len=37) "\t_, err := ParseStringEnum(string(x))",
  (string) (len=18) "\treturn err == nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=45) "var _stringEnumValue = map[string]StringEnum{",
  (string) (len=27) "\t\"random\": MyPrefix_Random,",
  (string) (len=27) "\t\"values\": MyPrefix_Values,",
  (string) (len=25) "\t\"here\":   MyPrefix_Here,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=64) "// ParseStringEnum attempts to convert a string to a StringEnum.",
  (string) (len=55) "func ParseStringEnum(name string) (StringEnum, error) {",
  (string) (len=41) "\tif x, ok := _stringEnumValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=74) "\treturn StringEnum(\"\"), fmt.Errorf(\"%s is %w\", name, ErrInvalidStringEnum)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// MarshalText implements the text marshaller method.",
  (string) (len=51) "func (x StringEnum) MarshalText() ([]byte, error) {",
  (string) (len=30) "\treturn []byte(string(x)), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// UnmarshalText implements the text unmarshaller method.",
  (string) (len=55) "func (x *StringEnum) UnmarshalText(text []byte) error {",
  (string) (len=42) "\ttmp, err := ParseStringEnum(string(text))",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=44) "func (x *StringEnum) Set(val string) error {",
  (string) (len=31) "\tv, err := ParseStringEnum(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=40) "func (x *StringEnum) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=36) "func (x *StringEnum) Type() string {",
  (string) (len=20) "\treturn \"StringEnum\"",
  (string) (len=1) "}",
  (string) ""
}
