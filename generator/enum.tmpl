{{- define "header"}}
// Code generated by go-enum DO NOT EDIT.
// Version: {{ .version }}
// Revision: {{ .revision }}
// Build Date: {{ .buildDate }}
// Built By: {{ .builtBy }}

package {{.package}}

import (
    "fmt"
)
{{end -}}

{{- define "enum"}}
const (
{{- $enumName := .enum.Name -}}
{{- $enumType := .enum.Type -}}
{{- $noComments := .nocomments -}}
{{- $vars := dict "lastoffset" "0" -}}
{{ range $rIndex, $value := .enum.Values }}
	{{- $lastOffset := pluck "lastoffset" $vars | first }}{{ $offset := offset $rIndex $enumType $value }}
	{{- if $noComments }}{{else}}
	{{ if eq $value.Name "_"}}// Skipped value.{{else}}// {{$value.PrefixedName}} is a {{$enumName}} of type {{$value.Name}}.{{end}}{{end}}
	{{- if $value.Comment}}
	// {{$value.Comment}}
	{{- end}}
    {{$value.PrefixedName}} {{ if eq $rIndex 0 }}{{$enumName}} = iota{{ if ne "0" $offset }} + {{ $offset }}{{end}}{{else if ne $lastOffset $offset }}{{$enumName}} = iota + {{ $offset }}{{end}}{{$_ := set $vars "lastoffset" $offset}}
{{- end}}
)
{{ $errInvalidVar := symbol "ErrInvalid" .enum.Name }}
{{if .names -}}
{{ $namesVar := symbol "_" .enum.Name "Names" }}
var {{$namesVar}} = {{namify .enum}}

{{ $namesFunc := symbol "" .enum.Name "Names" }}
// {{$namesFunc}} returns a list of possible string values of {{.enum.Name}}.
func {{$namesFunc}}() []string {
	tmp := make([]string, len({{$namesVar}}))
	copy(tmp, {{$namesVar}})
	return tmp
}
var {{$errInvalidVar}} = fmt.Errorf("not a valid {{.enum.Name}}, try [%s]", strings.Join({{$namesVar}}, ", "))
{{- else -}}
var {{$errInvalidVar}} = errors.New("not a valid {{.enum.Name}}")
{{- end}}

{{ if .values -}}
{{ $valuesFunc := symbol "" .enum.Name "Values" }}
// {{$valuesFunc}} returns a list of the values for {{.enum.Name}}
func {{$valuesFunc}}() []{{.enum.Name}} {
    return []{{.enum.Name}}{ {{ range $rIndex, $value := .enum.Values }}{{ if ne $value.Name "_"}}
		{{$value.PrefixedName}},{{ end }}
{{- end}}
    }
}
{{ end -}}

{{ $nameConst := symbol "_" .enum.Name "Name" }}
const {{$nameConst}} = "{{ stringify .enum .forcelower }}"

{{ $mapVar := symbol "_" .enum.Name "Map" }}
var {{$mapVar}} = {{ mapify .enum }}

// String implements the Stringer interface.
func (x {{.enum.Name}}) String() string {
	if str, ok := {{$mapVar}}[x]; ok {
		return str
	}
	return fmt.Sprintf("{{.enum.Name}}(%d)", x)
}

{{ $valueVar := symbol "_" .enum.Name "Value" }}
var {{$valueVar}} = {{ unmapify .enum .lowercase }}

{{ $parseFunc := symbol "Parse" .enum.Name }}
// {{$parseFunc}} attempts to convert a string to a {{.enum.Name}}.
func {{$parseFunc}}(name string) ({{.enum.Name}}, error) {
	if x, ok := {{$valueVar}}[name]; ok {
		return x, nil
	}{{if .nocase }}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := {{$valueVar}}[strings.ToLower(name)]; ok {
		return x, nil
	}{{- end}}
	return {{.enum.Name}}(0), fmt.Errorf("%s is %w", name, {{$errInvalidVar}})
}

{{ if .mustparse }}
{{ $mustParseFunc := symbol "MustParse" .enum.Name }}
// {{$mustParseFunc}} converts a string to a {{.enum.Name}}, and panics if is not valid.
func {{$mustParseFunc}}(name string) {{.enum.Name}} {
	val, err := {{$parseFunc}}(name)
	if err != nil {
		panic(err)
	}
	return val
}
{{end}}

{{ if .ptr }}
func (x {{.enum.Name}}) Ptr() *{{.enum.Name}} {
	return &x
}
{{end}}

{{ if .marshal }}
// MarshalText implements the text marshaller method.
func (x {{.enum.Name}}) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *{{.enum.Name}}) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := {{$parseFunc}}(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
{{end}}

{{ if or .sql .sqlnullint .sqlnullstr }}
{{ $errNilPtrVar := symbol "err" .enum.Name "NilPtr" }}
var {{$errNilPtrVar}} = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *{{.enum.Name}}) Scan(value interface{}) (err error) {
	if value == nil {
		*x = {{.enum.Name}}(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = {{.enum.Name}}(v)
	case string:
		*x, err = {{$parseFunc}}(v){{if .sqlnullint }}
		if err != nil {
			// try parsing the integer value as a string
			if val, verr := strconv.Atoi(v); verr == nil {
				*x, err = {{.enum.Name}}(val), nil
			}
		}{{end}}
	case []byte:
		*x, err = {{$parseFunc}}(string(v)){{if .sqlnullint }}
		if err != nil {
			// try parsing the integer value as a string
			if val, verr := strconv.Atoi(string(v)); verr == nil {
				*x, err = {{.enum.Name}}(val), nil
			}
		}{{end}}
	case {{.enum.Name}}:
		*x = v
	case int:
		*x = {{.enum.Name}}(v)
	case *{{.enum.Name}}:
		if v == nil{
			return {{$errNilPtrVar}}
		}
		*x = *v
	case uint:
		*x = {{.enum.Name}}(v)
	case uint64:
		*x = {{.enum.Name}}(v)
	case *int:
		if v == nil{
			return {{$errNilPtrVar}}
		}
		*x = {{.enum.Name}}(*v)
	case *int64:
		if v == nil{
			return {{$errNilPtrVar}}
		}
		*x = {{.enum.Name}}(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = {{.enum.Name}}(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil{
			return {{$errNilPtrVar}}
		}
		*x = {{.enum.Name}}(*v)
	case *uint:
		if v == nil{
			return {{$errNilPtrVar}}
		}
		*x = {{.enum.Name}}(*v)
	case *uint64:
		if v == nil{
			return {{$errNilPtrVar}}
		}
		*x = {{.enum.Name}}(*v)
	case *string:
		if v == nil{
			return {{$errNilPtrVar}}
		}
		*x, err = {{$parseFunc}}(*v){{if .sqlnullint }}
		if err != nil {
			// try parsing the integer value as a string
			if val, verr := strconv.Atoi(*v); verr == nil {
				*x, err = {{.enum.Name}}(val), nil
			}
		}{{end}}
	}

	return
}

{{ if or .sql .sqlnullstr }}
// Value implements the driver Valuer interface.
func (x {{.enum.Name}}) Value() (driver.Value, error) {
	return x.String(), nil
}
{{ else }}
// Value implements the driver Valuer interface.
func (x {{.enum.Name}}) Value() (driver.Value, error) {
	return int64(x), nil
}
{{end}}

{{end}}


{{ if .flag }}
// Set implements the Golang flag.Value interface func.
func (x *{{.enum.Name}}) Set(val string) error {
	v, err := {{$parseFunc}}(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *{{.enum.Name}}) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *{{.enum.Name}}) Type() string {
	return "{{.enum.Name}}"
}
{{end}}

{{ if or .sqlnullint .sqlnullstr }}
{{ $nullType := symbol "Null" .enum.Name }}
{{ $newNullFunc := symbol "New" $nullType }}
type {{$nullType}} struct{
	{{.enum.Name}}	{{.enum.Name}}
	Valid 					bool{{/* Add some info as to whether this value was set during unmarshalling or not */}}{{if .marshal }}
	Set							bool{{ end }}
}

func {{$newNullFunc}}(val interface{}) (x {{$nullType}}) {
	x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	return
}

// Scan implements the Scanner interface.
func (x *{{$nullType}}) Scan(value interface{}) (err error) {
	{{- if .marshal }}x.Set = true{{ end }}
	if value == nil {
		x.{{.enum.Name}}, x.Valid = {{.enum.Name}}(0), false
		return
	}

	err = x.{{.enum.Name}}.Scan(value)
	x.Valid = (err == nil)
	return
}

{{ if .sqlnullint }}
// Value implements the driver Valuer interface.
func (x {{$nullType}}) Value() (driver.Value, error) {
	if !x.Valid{
		return nil, nil
	}
	// driver.Value accepts int64 for int values.
	return int64(x.{{.enum.Name}}), nil
}
{{ else }}
// Value implements the driver Valuer interface.
func (x {{$nullType}}) Value() (driver.Value, error) {
	if !x.Valid{
		return nil, nil
	}
	return x.{{.enum.Name}}.String(), nil
}
{{ end }}

{{ if .marshal }}
// MarshalJSON correctly serializes a {{$nullType}} to JSON.
func (n {{$nullType}}) MarshalJSON() ([]byte, error) {
	const nullStr = "null"
	if n.Valid {
		return json.Marshal(n.{{.enum.Name}})
	}
	return []byte(nullStr), nil
}

// UnmarshalJSON correctly deserializes a {{$nullType}} from JSON.
func (n *{{$nullType}}) UnmarshalJSON(b []byte) error {
	n.Set = true
	var x interface{}
	err := json.Unmarshal(b, &x)
	if err != nil{
		return err
	}
	err = n.Scan(x)
	return err
}
{{ end }}

{{ if and .sqlnullint .sqlnullstr }}
{{ $nullStrType := symbol "" $nullType "Str" }}
type {{$nullStrType}} struct {
	{{$nullType}}
}

{{ $newNullStrFunc := symbol "New" $nullStrType }}
func {{$newNullStrFunc}}(val interface{}) (x {{$nullStrType}}) {
	x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	return
}

// Value implements the driver Valuer interface.
func (x {{$nullStrType}}) Value() (driver.Value, error) {
	if !x.Valid{
		return nil, nil
	}
	return x.{{.enum.Name}}.String(), nil
}
{{ if .marshal }}
// MarshalJSON correctly serializes a {{$nullType}} to JSON.
func (n {{$nullStrType}}) MarshalJSON() ([]byte, error) {
	const nullStr = "null"
	if n.Valid {
		return json.Marshal(n.{{.enum.Name}})
	}
	return []byte(nullStr), nil
}

// UnmarshalJSON correctly deserializes a {{$nullType}} from JSON.
func (n *{{$nullStrType}}) UnmarshalJSON(b []byte) error {
	n.Set = true
	var x interface{}
	err := json.Unmarshal(b, &x)
	if err != nil{
		return err
	}
	err = n.Scan(x)
	return err
}
{{ end }}
{{ end }}
{{ end }}
{{ end }}
