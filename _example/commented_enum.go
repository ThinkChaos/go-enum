// Code generated by go-enum DO NOT EDIT.
// Version: example
// Revision: example
// Build Date: example
// Built By: example

package example

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// CommentedValue1 is a Commented of type Value1.
	// Commented value 1
	CommentedValue1 Commented = iota
	// CommentedValue2 is a Commented of type Value2.
	CommentedValue2
	// CommentedValue3 is a Commented of type Value3.
	// Commented value 3
	CommentedValue3
)

var ErrInvalidCommented = errors.New("not a valid Commented")

const _commentedName = "value1value2value3"

var _commentedMap = map[Commented]string{
	CommentedValue1: _commentedName[0:6],
	CommentedValue2: _commentedName[6:12],
	CommentedValue3: _commentedName[12:18],
}

// String implements the Stringer interface.
func (x Commented) String() string {
	if str, ok := _commentedMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Commented(%d)", x)
}

var _commentedValue = map[string]Commented{
	_commentedName[0:6]:                    CommentedValue1,
	strings.ToLower(_commentedName[0:6]):   CommentedValue1,
	_commentedName[6:12]:                   CommentedValue2,
	strings.ToLower(_commentedName[6:12]):  CommentedValue2,
	_commentedName[12:18]:                  CommentedValue3,
	strings.ToLower(_commentedName[12:18]): CommentedValue3,
}

// ParseCommented attempts to convert a string to a Commented.
func ParseCommented(name string) (Commented, error) {
	if x, ok := _commentedValue[name]; ok {
		return x, nil
	}
	return Commented(0), fmt.Errorf("%s is %w", name, ErrInvalidCommented)
}

// MarshalText implements the text marshaller method.
func (x Commented) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Commented) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseCommented(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// Skipped value.
	// Placeholder with a ','  in it. (for harder testing)
	_ ComplexCommented = iota
	// ComplexCommentedValue1 is a ComplexCommented of type Value1.
	// Commented value 1
	ComplexCommentedValue1
	// ComplexCommentedValue2 is a ComplexCommented of type Value2.
	ComplexCommentedValue2
	// ComplexCommentedValue3 is a ComplexCommented of type Value3.
	// Commented value 3
	ComplexCommentedValue3
)

var ErrInvalidComplexCommented = errors.New("not a valid ComplexCommented")

const _complexCommentedName = "value1value2value3"

var _complexCommentedMap = map[ComplexCommented]string{
	ComplexCommentedValue1: _complexCommentedName[0:6],
	ComplexCommentedValue2: _complexCommentedName[6:12],
	ComplexCommentedValue3: _complexCommentedName[12:18],
}

// String implements the Stringer interface.
func (x ComplexCommented) String() string {
	if str, ok := _complexCommentedMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ComplexCommented(%d)", x)
}

var _complexCommentedValue = map[string]ComplexCommented{
	_complexCommentedName[0:6]:                    ComplexCommentedValue1,
	strings.ToLower(_complexCommentedName[0:6]):   ComplexCommentedValue1,
	_complexCommentedName[6:12]:                   ComplexCommentedValue2,
	strings.ToLower(_complexCommentedName[6:12]):  ComplexCommentedValue2,
	_complexCommentedName[12:18]:                  ComplexCommentedValue3,
	strings.ToLower(_complexCommentedName[12:18]): ComplexCommentedValue3,
}

// ParseComplexCommented attempts to convert a string to a ComplexCommented.
func ParseComplexCommented(name string) (ComplexCommented, error) {
	if x, ok := _complexCommentedValue[name]; ok {
		return x, nil
	}
	return ComplexCommented(0), fmt.Errorf("%s is %w", name, ErrInvalidComplexCommented)
}

// MarshalText implements the text marshaller method.
func (x ComplexCommented) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ComplexCommented) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseComplexCommented(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
