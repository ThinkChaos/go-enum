// Code generated by go-enum DO NOT EDIT.
// Version: example
// Revision: example
// Build Date: example
// Built By: example

package example

import (
	"errors"
	"fmt"
)

const (
	// AcmeIncProductAnvil is a Product of type Anvil.
	AcmeIncProductAnvil Product = iota
	// AcmeIncProductDynamite is a Product of type Dynamite.
	AcmeIncProductDynamite
	// AcmeIncProductGlue is a Product of type Glue.
	AcmeIncProductGlue
)

var ErrInvalidProduct = errors.New("not a valid Product")

const _productName = "AnvilDynamiteGlue"

var _productMap = map[Product]string{
	AcmeIncProductAnvil:    _productName[0:5],
	AcmeIncProductDynamite: _productName[5:13],
	AcmeIncProductGlue:     _productName[13:17],
}

// String implements the Stringer interface.
func (x Product) String() string {
	if str, ok := _productMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Product(%d)", x)
}

var _productValue = map[string]Product{
	_productName[0:5]:   AcmeIncProductAnvil,
	_productName[5:13]:  AcmeIncProductDynamite,
	_productName[13:17]: AcmeIncProductGlue,
}

// ParseProduct attempts to convert a string to a Product.
func ParseProduct(name string) (Product, error) {
	if x, ok := _productValue[name]; ok {
		return x, nil
	}
	return Product(0), fmt.Errorf("%s is %w", name, ErrInvalidProduct)
}
