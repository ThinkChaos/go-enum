// Code generated by go-enum DO NOT EDIT.
// Version: example
// Revision: example
// Build Date: example
// Built By: example

package example

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"strings"
)

const (
	// privateIntFirst is a privateInt of type First.
	privateIntFirst privateInt = iota
	// privateIntSecond is a privateInt of type Second.
	privateIntSecond
	// privateIntThird is a privateInt of type Third.
	privateIntThird
)

var _privateIntNames = []string{
	_privateIntName[0:5],
	_privateIntName[5:11],
	_privateIntName[11:16],
}

// privateIntNames returns a list of possible string values of privateInt.
func privateIntNames() []string {
	tmp := make([]string, len(_privateIntNames))
	copy(tmp, _privateIntNames)
	return tmp
}

var errInvalidPrivateInt = fmt.Errorf("not a valid privateInt, try [%s]", strings.Join(_privateIntNames, ", "))

// privateIntValues returns a list of the values for privateInt
func privateIntValues() []privateInt {
	return []privateInt{
		privateIntFirst,
		privateIntSecond,
		privateIntThird,
	}
}

const _privateIntName = "FirstSecondThird"

var _privateIntMap = map[privateInt]string{
	privateIntFirst:  _privateIntName[0:5],
	privateIntSecond: _privateIntName[5:11],
	privateIntThird:  _privateIntName[11:16],
}

// String implements the Stringer interface.
func (x privateInt) String() string {
	if str, ok := _privateIntMap[x]; ok {
		return str
	}
	return fmt.Sprintf("privateInt(%d)", x)
}

var _privateIntValue = map[string]privateInt{
	_privateIntName[0:5]:   privateIntFirst,
	_privateIntName[5:11]:  privateIntSecond,
	_privateIntName[11:16]: privateIntThird,
}

// parsePrivateInt attempts to convert a string to a privateInt.
func parsePrivateInt(name string) (privateInt, error) {
	if x, ok := _privateIntValue[name]; ok {
		return x, nil
	}
	return privateInt(0), fmt.Errorf("%s is %w", name, errInvalidPrivateInt)
}

func (x privateInt) Ptr() *privateInt {
	return &x
}

// MarshalText implements the text marshaller method.
func (x privateInt) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *privateInt) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := parsePrivateInt(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errPrivateIntNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *privateInt) Scan(value interface{}) (err error) {
	if value == nil {
		*x = privateInt(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = privateInt(v)
	case string:
		*x, err = parsePrivateInt(v)
	case []byte:
		*x, err = parsePrivateInt(string(v))
	case privateInt:
		*x = v
	case int:
		*x = privateInt(v)
	case *privateInt:
		if v == nil {
			return errPrivateIntNilPtr
		}
		*x = *v
	case uint:
		*x = privateInt(v)
	case uint64:
		*x = privateInt(v)
	case *int:
		if v == nil {
			return errPrivateIntNilPtr
		}
		*x = privateInt(*v)
	case *int64:
		if v == nil {
			return errPrivateIntNilPtr
		}
		*x = privateInt(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = privateInt(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errPrivateIntNilPtr
		}
		*x = privateInt(*v)
	case *uint:
		if v == nil {
			return errPrivateIntNilPtr
		}
		*x = privateInt(*v)
	case *uint64:
		if v == nil {
			return errPrivateIntNilPtr
		}
		*x = privateInt(*v)
	case *string:
		if v == nil {
			return errPrivateIntNilPtr
		}
		*x, err = parsePrivateInt(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x privateInt) Value() (driver.Value, error) {
	return x.String(), nil
}

// Set implements the Golang flag.Value interface func.
func (x *privateInt) Set(val string) error {
	v, err := parsePrivateInt(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *privateInt) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *privateInt) Type() string {
	return "privateInt"
}

type nullPrivateInt struct {
	privateInt privateInt
	Valid      bool
	Set        bool
}

func newNullPrivateInt(val interface{}) (x nullPrivateInt) {
	x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	return
}

// Scan implements the Scanner interface.
func (x *nullPrivateInt) Scan(value interface{}) (err error) {
	x.Set = true
	if value == nil {
		x.privateInt, x.Valid = privateInt(0), false
		return
	}

	err = x.privateInt.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x nullPrivateInt) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.privateInt.String(), nil
}

// MarshalJSON correctly serializes a nullPrivateInt to JSON.
func (n nullPrivateInt) MarshalJSON() ([]byte, error) {
	const nullStr = "null"
	if n.Valid {
		return json.Marshal(n.privateInt)
	}
	return []byte(nullStr), nil
}

// UnmarshalJSON correctly deserializes a nullPrivateInt from JSON.
func (n *nullPrivateInt) UnmarshalJSON(b []byte) error {
	n.Set = true
	var x interface{}
	err := json.Unmarshal(b, &x)
	if err != nil {
		return err
	}
	err = n.Scan(x)
	return err
}

const (
	// privateStrFirst is a privateStr of type First.
	privateStrFirst privateStr = "a"
	// privateStrSecond is a privateStr of type Second.
	privateStrSecond privateStr = "b"
	// privateStrThird is a privateStr of type Third.
	privateStrThird privateStr = "c"
)

var _privateStrNames = []string{
	string(privateStrFirst),
	string(privateStrSecond),
	string(privateStrThird),
}

// privateStrNames returns a list of possible string values of privateStr.
func privateStrNames() []string {
	tmp := make([]string, len(_privateStrNames))
	copy(tmp, _privateStrNames)
	return tmp
}

var errInvalidPrivateStr = fmt.Errorf("not a valid privateStr, try [%s]", strings.Join(_privateStrNames, ", "))

// privateStrValues returns a list of the values for privateStr
func privateStrValues() []privateStr {
	return []privateStr{
		privateStrFirst,
		privateStrSecond,
		privateStrThird,
	}
}

// String implements the Stringer interface.
func (x privateStr) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x privateStr) IsValid() bool {
	_, err := parsePrivateStr(string(x))
	return err == nil
}

var _privateStrValue = map[string]privateStr{
	"a": privateStrFirst,
	"b": privateStrSecond,
	"c": privateStrThird,
}

// parsePrivateStr attempts to convert a string to a privateStr.
func parsePrivateStr(name string) (privateStr, error) {
	if x, ok := _privateStrValue[name]; ok {
		return x, nil
	}
	return privateStr(""), fmt.Errorf("%s is %w", name, errInvalidPrivateStr)
}

func (x privateStr) Ptr() *privateStr {
	return &x
}

// MarshalText implements the text marshaller method.
func (x privateStr) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *privateStr) UnmarshalText(text []byte) error {
	tmp, err := parsePrivateStr(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errPrivateStrNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *privateStr) Scan(value interface{}) (err error) {
	if value == nil {
		*x = privateStr("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = parsePrivateStr(v)
	case []byte:
		*x, err = parsePrivateStr(string(v))
	case privateStr:
		*x = v
	case *privateStr:
		if v == nil {
			return errPrivateStrNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errPrivateStrNilPtr
		}
		*x, err = parsePrivateStr(*v)
	default:
		return errors.New("invalid type for privateStr")
	}

	return
}

// Value implements the driver Valuer interface.
func (x privateStr) Value() (driver.Value, error) {
	return x.String(), nil
}

// Set implements the Golang flag.Value interface func.
func (x *privateStr) Set(val string) error {
	v, err := parsePrivateStr(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *privateStr) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *privateStr) Type() string {
	return "privateStr"
}

type nullPrivateStr struct {
	privateStr privateStr
	Valid      bool
	Set        bool
}

func newNullPrivateStr(val interface{}) (x nullPrivateStr) {
	err := x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	_ = err            // make any errcheck linters happy
	return
}

// Scan implements the Scanner interface.
func (x *nullPrivateStr) Scan(value interface{}) (err error) {
	if value == nil {
		x.privateStr, x.Valid = privateStr(""), false
		return
	}

	err = x.privateStr.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x nullPrivateStr) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.privateStr.String(), nil
}

// MarshalJSON correctly serializes a nullPrivateStr to JSON.
func (n nullPrivateStr) MarshalJSON() ([]byte, error) {
	const nullStr = "null"
	if n.Valid {
		return json.Marshal(n.privateStr)
	}
	return []byte(nullStr), nil
}

// UnmarshalJSON correctly deserializes a nullPrivateStr from JSON.
func (n *nullPrivateStr) UnmarshalJSON(b []byte) error {
	n.Set = true
	var x interface{}
	err := json.Unmarshal(b, &x)
	if err != nil {
		return err
	}
	err = n.Scan(x)
	return err
}
